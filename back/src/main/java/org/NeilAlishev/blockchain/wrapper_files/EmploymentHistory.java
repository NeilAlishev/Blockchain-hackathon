package org.NeilAlishev.blockchain.wrapper_files;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.0.
 */
public final class EmploymentHistory extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b5b6109618061001f6000396000f300606060405236156100805763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631d96f3fb81146100855780633ec9e3b0146100ef578063725cf6af146101595780638c9cc9da146101a4578063a6d2ba1e146101cf578063aa2237b7146101f7578063b52956cb14610242575b600080fd5b341561009057600080fd5b61009b600435610260565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156100db5780820151818401525b6020016100c2565b505050509050019250505060405180910390f35b34156100fa57600080fd5b61009b6004356102d2565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156100db5780820151818401525b6020016100c2565b505050509050019250505060405180910390f35b341561016457600080fd5b610172600435602435610401565b6040518084815260200183815260200182600281111561018e57fe5b60ff168152602001935050505060405180910390f35b34156101af57600080fd5b6101bd60043560243561049a565b60405190815260200160405180910390f35b34156101da57600080fd5b6101bd6004356104cc565b60405190815260200160405180910390f35b341561020257600080fd5b610172600435602435610598565b6040518084815260200183815260200182600281111561018e57fe5b60ff168152602001935050505060405180910390f35b341561024d57600080fd5b61025e6004356024356044356105de565b005b610268610835565b600160008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156102c557602002820191906000526020600020905b8154815260200190600101908083116102b1575b505050505090505b919050565b6102da610835565b6102e2610835565b6102ea610835565b600080600086815260200190815260200160002080548060200260200160405190810160405281815291906000602084015b82821015610388576000848152602081206003840201905b506060604051908101604090815282548252600183015460208301526002808401549293929184019160ff169081111561036a57fe5b600281111561037557fe5b815250508152602001906001019061031c565b505050509250825160405180591061039d5750595b908082528060200260200182016040525b509150600090505b82518110156103f5578281815181106103cb57fe5b90602001906020020151518282815181106103e257fe5b602090810290910101525b6001016103b6565b8193505b505050919050565b600080600061040e610859565b600086815260208190526040902080548690811061042857fe5b906000526020600020906003020160005b506060604051908101604090815282548252600183015460208301526002808401549293929184019160ff169081111561046f57fe5b600281111561047a57fe5b90525090508051816020015182604001519350935093505b509250925092565b6001602052816000526040600020818154811015156104b557fe5b906000526020600020900160005b91509150505481565b60006104d6610859565b60008381526020819052604090205415156104f5576000199150610591565b60008381526020819052604090208054600019810190811061051357fe5b906000526020600020906003020160005b506060604051908101604090815282548252600183015460208301526002808401549293929184019160ff169081111561055a57fe5b600281111561056557fe5b905250905060005b8160400151600281111561057d57fe5b1461058c576000199150610591565b805191505b5b50919050565b6000602052816000526040600020818154811015156105b357fe5b906000526020600020906003020160005b508054600182015460029092015490935090915060ff1683565b6105e6610859565b60008060025b8411156105f857600080fd5b60008681526020819052604090205415156106205760005b841461061b57600080fd5b6106ec565b60008681526020819052604090208054600019810190811061063e57fe5b906000526020600020906003020160005b506060604051908101604090815282548252600183015460208301526002808401549293929184019160ff169081111561068557fe5b600281111561069057fe5b905250925060005b8414156106c15760005b836040015160028111156106b257fe5b1161061b57600080fd5b6106ec565b60005b836040015160028111156106d457fe5b1480156106e15750848351145b15156106ec57600080fd5b5b5b600086815260208190526040902080546001810161070c8382610885565b916000526020600020906003020160005b60606040519081016040528089815260200142815260200188600281111561074157fe5b600281111561074c57fe5b9052919050815181556020820151816001015560408201518160020160006101000a81548160ff0219169083600281111561078357fe5b021790555050506000868152600160205260408120935090505b8414156107ce5781548290600181016107b683826108b7565b916000526020600020900160005b508790555061082b565b5060005b815481101561082b578582828154811015156107ea57fe5b906000526020600020900160005b5054141561082257818181548110151561080e57fe5b906000526020600020900160005b50600090555b5b6001016107d2565b5b5b505050505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b60606040519081016040528060008152602001600081526020016000600281111561088057fe5b905290565b8154818355818115116108b1576003028160030283600052602060002091820191016108b191906108e1565b5b505050565b8154818355818115116108b1576000838152602090206108b1918101908301610914565b5b505050565b61091191905b8082111561090d576000808255600182015560028101805460ff191690556003016108e7565b5090565b90565b61091191905b8082111561090d576000815560010161091a565b5090565b905600a165627a7a72305820021911699f89ac6635d7b0f4b150f5631860a8f9a7365f515a710230bcd660b80029";

    private EmploymentHistory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private EmploymentHistory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<DynamicArray<Uint256>> getOrganisationEmployees(Uint256 organizationId) {
        Function function = new Function("getOrganisationEmployees", 
                Arrays.<Type>asList(organizationId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<DynamicArray<Uint256>> getEmploymentHistory(Uint256 personId) {
        Function function = new Function("getEmploymentHistory", 
                Arrays.<Type>asList(personId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> getEmploymentRecord(Uint256 personId, Uint256 recordId) {
        Function function = new Function("getEmploymentRecord", 
                Arrays.<Type>asList(personId, recordId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Uint256> employeesOf(Uint256 param0, Uint256 param1) {
        Function function = new Function("employeesOf", 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Int256> getCurrentEmployment(Uint256 personId) {
        Function function = new Function("getCurrentEmployment", 
                Arrays.<Type>asList(personId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> empRecordOf(Uint256 param0, Uint256 param1) {
        Function function = new Function("empRecordOf", 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addEmpRecord(Uint256 personId, Uint256 organizationId, Uint256 status) {
        Function function = new Function("addEmpRecord", Arrays.<Type>asList(personId, organizationId, status), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<EmploymentHistory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(EmploymentHistory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<EmploymentHistory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(EmploymentHistory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static EmploymentHistory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EmploymentHistory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static EmploymentHistory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EmploymentHistory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
